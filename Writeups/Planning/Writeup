# Planning — Grafana RCE → container foothold → root via cron (Lab)

**Date:** 2025-10-16
**TL;DR:** Discovered a Grafana virtual host (`grafana.planning.htb`) via host-header fuzzing. Using lab-provided Grafana credentials and a known Grafana SQL-expression RCE PoC (run in-lab), I obtained a shell inside the Grafana container, recovered internal credentials and a cron/backup password, used those credentials to access an internal web admin on `127.0.0.1:8000` (via SSH port-forward), and escalated to root by abusing a cron job that executed web-writable content. All actions were performed on a retired HackTheBox VM in an isolated lab.

---

## Scope & permission
All testing was performed on a retired HackTheBox machine in a lab I control. Public artifacts and commands in this writeup are **sanitized** for publication. Do **not** run exploit code or destructive commands against third-party or production systems.

---

## Environment & notable findings
- Target: `TARGET_IP` (`planning.htb`) — (lab IP used during testing)
- Services discovered (sanitized output):
  - SSH — OpenSSH 9.6p1 (port 22)
  - HTTP — nginx 1.24.0 (port 80)
  - Grafana web UI reachable via `grafana.planning.htb` (Grafana v11.0.0)
  - Internal services bound to `127.0.0.1` inside the host/container: `8000`, `3000`, `3306`, etc.
- Container evidence: environment `HOSTNAME` looked like a container id.

---

## Tools used
`nmap`, `ffuf`, web browser, `nc` (listener) — plus standard SSH and shell utilities. (Exploit PoC executed in-lab; exploit source is not published here.)

---

## Steps (what I actually did — reproduced from my session)

> The commands below are sanitized.

---

### 1) Port scan
```bash
nmap -sCV -T4 --open --stats-every 5s -oA recon TARGET_IP

Observed: open ports 22 (ssh) and 80 (http). HTTP returned nginx and suggested the site planning.htb.

---

### 2) Add initial host mapping (so planning.htb resolves locally)

echo "TARGET_IP planning.htb" | sudo tee -a /etc/hosts

(This lets you open http://planning.htb in a browser.)

---

### 3) Virtual-host (vhost) discovery — found grafana.planning.htb

I ran host-header fuzzing with ffuf and filtered identical/noise responses; the run produced grafana.planning.htb.

ffuf -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt \
     -H 'Host: FUZZ.planning.htb' \
     -u http://planning.htb -c -fs 178

Action: after finding the vhost, I added it to /etc/hosts:

echo "TARGET_IP grafana.planning.htb" | sudo tee -a /etc/hosts

Now http://grafana.planning.htb can be reached from my browser.

---

### 4) Access Grafana & identify version

Opened http://grafana.planning.htb in the browser — saw the Grafana login page and identified Grafana v11.0.0 (public metadata).

---

### 5) Login with provided/lab credentials

Logged into Grafana using the lab-provided credentials:

Username: admin

Password: <GRAFANA_ADMIN_PASS> (redacted for publication)

---

### 6) Researched vulnerability (high level)

From Grafana version info I researched known vulnerabilities and located a public PoC for the Grafana SQL-expression RCE (CVE-2024-9264). I executed that PoC in-lab (exploit source and reverse-shell details omitted here for safety).

Note: I ran a listener locally (on ATTACKER_IP:PORT) prior to running the PoC

---

### 7) Obtained shell in Grafana container

The PoC produced an interactive shell inside the Grafana container (in-lab). Within that shell:

pwd showed /usr/share/grafana (container context)

env revealed:

HOSTNAME=7ce659d667d7

GF_SECURITY_ADMIN_USER=enzo

GF_SECURITY_ADMIN_PASSWORD=<REDACTED_GRAFANA_ENV_PASS>

The hostname looked like a Docker container id — indicating a container environment.

---

### 8) Test SSH access with recovered credentials

Using the Grafana-container-found credentials (enzo + <REDACTED_GRAFANA_ENV_PASS>), I attempted SSH to the host:
ssh enzo@TARGET_IP
# password: <REDACTED_GRAFANA_ENV_PASS>

Successfully authenticated as user enzo and retrieved user.txt (user flag) on the box.

---

### 9) Enumerated local services (inside host/container)

I checked listening services to find potential internal admin panels and services:

netstat -tulnp

Sanitized/listening summary (from the session):

127.0.0.1:8000 — LISTEN

127.0.0.1:3000 — LISTEN

127.0.0.1:3306 — LISTEN

127.0.0.1:40193 — LISTEN

127.0.0.1:33060 — LISTEN

0.0.0.0:80 — LISTEN

:::22 — LISTEN

The notable internal-only web service was on 127.0.0.1:8000.

---

10) Port-forward to access internal admin (127.0.0.1:8000)

From my attacker host I forwarded the target's localhost:8000 to my local port 8000:

ssh -L 8000:127.0.0.1:8000 enzo@TARGET_IP
# then open http://127.0.0.1:8000 locally

When I tried the obvious credentials (admin / enzo-password), they failed on this internal UI.

---

### 11) Found cron/backup configuration (crontab.db)

While enumerating files (from the container), I discovered crontab.db. Inspecting the file revealed:

A backup job entry named Grafana backup

A schedule: @daily

A password used by the backup process: <BACKUP_PASSWORD_REDACTED>

A cleanup script invoked from root directory (i.e., actions run as root)

This indicated the backup/cron job ran with root privileges and used the discovered backup password — a critical escalation opportunity.

---

### 12) Use backup/root credentials to access internal admin

Using the discovered backup/root credentials (the password above), I authenticated to the internal admin UI on 127.0.0.1:8000 as root (or with root-level privileges) and gained administrative access.

---

### 13) Achieve full root via setuid / cron technique

In-lab, after gaining admin/root access via the internal UI, I performed the following (lab-only) to get a persistent root shell:

**Action performed (lab-only)**

# setuid /bin/bash (performed in the lab environment)
chmod u+s /bin/bash

Observed effect:

ls -l /bin/bash showed the setuid bit set: -rwsr-xr-x root root /bin/bash

Running bash -p produced an interactive shell with effective root privileges.

Accessed /root/root.txt (root flag) to confirm root.

Important: setting setuid on system binaries is destructive / dangerous and should never be performed on real systems. The above is described for completeness of lab chain only.

---

Impact
Remote compromise of an admin web console (Grafana) led to container shell access; internal config and cron-driven backups exposed credentials that enabled access to an internal admin UI and ultimately root. This represents complete host compromise and significant risk to confidentiality, integrity and availability.
Remediation (prioritized)

Patch Grafana to a version that addresses CVE-2024-9264 immediately.

Avoid embedding secrets in dashboards or environment variables and restrict dashboard/API access to trusted networks.

Ensure cron scripts and backup inputs are owned by root and not writable by web services. Use strict file permissions and input validation.

Limit container privileges and avoid mounting host-sensitive resources (Docker socket) into application containers.

Log and alert on changes to cron, setuid changes, and unexpected web-writable locations being modified.


